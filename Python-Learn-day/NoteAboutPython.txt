列表生成式
1.在一个列表生成式中，for前面的if ... else是表达式
，而for后面的if是过滤条件，不能带else

生成器
2.如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？
这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。
generator保存的是算法

把函数改成generator函数后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代



iterable itertor:
1. Iterable（可迭代对象）
定义：任何可以被遍历的对象（如列表、元组、字典、字符串等）。

核心要求：实现 __iter__() 方法（或实现 __getitem__() 方法，支持从 0 开始的索引访问）。

特点：

可重复遍历（每次调用 iter() 会生成一个新的迭代器）。

直接用于 for 循环（底层自动调用 iter() 生成迭代器）。

2. Iterator（迭代器）
定义：用于逐个访问 Iterable 元素的对象，记录迭代的“当前状态”。

核心要求：实现 __iter__() 方法（返回自身）和 __next__() 方法（返回下一个元素，无元素时抛出 StopIteration）。

特点：

惰性计算：按需生成元素（适合处理大数据流）。

一次性使用：遍历结束后无法重置（需重新生成迭代器）。

